//
// Generated by JTB 1.3.2 DIT@UoA patched
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * All GJ void visitors must implement this interface.
 */

public interface GJVoidVisitor<A> {

   //
   // GJ void Auto class visitors
   //

   public void visit(NodeList n, A argu);
   public void visit(NodeListOptional n, A argu);
   public void visit(NodeOptional n, A argu);
   public void visit(NodeSequence n, A argu);
   public void visit(NodeToken n, A argu);

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> n0=MainClass()
    * f1 -> ( n2=TypeDeclaration() )*
    * f2 -> n4=<EOF>
    */
   public void visit(Goal n, A argu);

   /**
    * f0 -> n1="class"
    * f1 -> n2=Identifier()
    * f2 -> n4="{"
    * f3 -> n6="public"
    * f4 -> n8="static"
    * f5 -> n10="void"
    * f6 -> n12="main"
    * f7 -> n14="("
    * f8 -> n16="String"
    * f9 -> n18="["
    * f10 -> n20="]"
    * f11 -> n21=Identifier()
    * f12 -> n23=")"
    * f13 -> n25="{"
    * f14 -> ( n27=VarDeclaration() )*
    * f15 -> ( n29=Statement() )*
    * f16 -> n31="}"
    * f17 -> n33="}"
    */
   public void visit(MainClass n, A argu);

   /**
    * f0 -> ( n1=ClassDeclaration() | n2=ClassExtendsDeclaration() )
    */
   public void visit(TypeDeclaration n, A argu);

   /**
    * f0 -> n1="class"
    * f1 -> n2=Identifier()
    * f2 -> n4="{"
    * f3 -> ( n6=VarDeclaration() )*
    * f4 -> ( n8=MethodDeclaration() )*
    * f5 -> n10="}"
    */
   public void visit(ClassDeclaration n, A argu);

   /**
    * f0 -> n1="class"
    * f1 -> n2=Identifier()
    * f2 -> n4="extends"
    * f3 -> n5=Identifier()
    * f4 -> n7="{"
    * f5 -> ( n9=VarDeclaration() )*
    * f6 -> ( n11=MethodDeclaration() )*
    * f7 -> n13="}"
    */
   public void visit(ClassExtendsDeclaration n, A argu);

   /**
    * f0 -> n0=Type()
    * f1 -> n1=Identifier()
    * f2 -> n3=";"
    */
   public void visit(VarDeclaration n, A argu);

   /**
    * f0 -> n1="public"
    * f1 -> n2=Type()
    * f2 -> n3=Identifier()
    * f3 -> n5="("
    * f4 -> ( n7=FormalParameterList() )?
    * f5 -> n9=")"
    * f6 -> n11="{"
    * f7 -> ( n13=VarDeclaration() )*
    * f8 -> ( n15=Statement() )*
    * f9 -> n17="return"
    * f10 -> n18=Expression()
    * f11 -> n20=";"
    * f12 -> n22="}"
    */
   public void visit(MethodDeclaration n, A argu);

   /**
    * f0 -> n0=FormalParameter()
    * f1 -> n1=FormalParameterTail()
    */
   public void visit(FormalParameterList n, A argu);

   /**
    * f0 -> n0=Type()
    * f1 -> n1=Identifier()
    */
   public void visit(FormalParameter n, A argu);

   /**
    * f0 -> ( n1=FormalParameterTerm() )*
    */
   public void visit(FormalParameterTail n, A argu);

   /**
    * f0 -> n1=","
    * f1 -> n2=FormalParameter()
    */
   public void visit(FormalParameterTerm n, A argu);

   /**
    * f0 -> ( n1=ArrayType() | n2=BooleanType() | n3=IntegerType() | n4=Identifier() )
    */
   public void visit(Type n, A argu);

   /**
    * f0 -> n1="int"
    * f1 -> n3="["
    * f2 -> n5="]"
    */
   public void visit(ArrayType n, A argu);

   /**
    * f0 -> n1="boolean"
    */
   public void visit(BooleanType n, A argu);

   /**
    * f0 -> n1="int"
    */
   public void visit(IntegerType n, A argu);

   /**
    * f0 -> ( n1=Block() | n2=AssignmentStatement() | n3=ArrayAssignmentStatement() | n4=IfStatement() | n5=WhileStatement() | n6=PrintStatement() )
    */
   public void visit(Statement n, A argu);

   /**
    * f0 -> n1="{"
    * f1 -> ( n3=Statement() )*
    * f2 -> n5="}"
    */
   public void visit(Block n, A argu);

   /**
    * f0 -> n0=Identifier()
    * f1 -> n2="="
    * f2 -> n3=Expression()
    * f3 -> n5=";"
    */
   public void visit(AssignmentStatement n, A argu);

   /**
    * f0 -> n0=Identifier()
    * f1 -> n2="["
    * f2 -> n3=Expression()
    * f3 -> n5="]"
    * f4 -> n7="="
    * f5 -> n8=Expression()
    * f6 -> n10=";"
    */
   public void visit(ArrayAssignmentStatement n, A argu);

   /**
    * f0 -> n1="if"
    * f1 -> n3="("
    * f2 -> n4=Expression()
    * f3 -> n6=")"
    * f4 -> n7=Statement()
    * f5 -> n9="else"
    * f6 -> n10=Statement()
    */
   public void visit(IfStatement n, A argu);

   /**
    * f0 -> n1="while"
    * f1 -> n3="("
    * f2 -> n4=Expression()
    * f3 -> n6=")"
    * f4 -> n7=Statement()
    */
   public void visit(WhileStatement n, A argu);

   /**
    * f0 -> n1="System.out.println"
    * f1 -> n3="("
    * f2 -> n4=Expression()
    * f3 -> n6=")"
    * f4 -> n8=";"
    */
   public void visit(PrintStatement n, A argu);

   /**
    * f0 -> ( n1=AndExpression() | n2=CompareExpression() | n3=PlusExpression() | n4=MinusExpression() | n5=TimesExpression() | n6=ArrayLookup() | n7=ArrayLength() | n8=MessageSend() | n9=Clause() )
    */
   public void visit(Expression n, A argu);

   /**
    * f0 -> n0=Clause()
    * f1 -> n2="&&"
    * f2 -> n3=Clause()
    */
   public void visit(AndExpression n, A argu);

   /**
    * f0 -> n0=PrimaryExpression()
    * f1 -> n2="<"
    * f2 -> n3=PrimaryExpression()
    */
   public void visit(CompareExpression n, A argu);

   /**
    * f0 -> n0=PrimaryExpression()
    * f1 -> n2="+"
    * f2 -> n3=PrimaryExpression()
    */
   public void visit(PlusExpression n, A argu);

   /**
    * f0 -> n0=PrimaryExpression()
    * f1 -> n2="-"
    * f2 -> n3=PrimaryExpression()
    */
   public void visit(MinusExpression n, A argu);

   /**
    * f0 -> n0=PrimaryExpression()
    * f1 -> n2="*"
    * f2 -> n3=PrimaryExpression()
    */
   public void visit(TimesExpression n, A argu);

   /**
    * f0 -> n0=PrimaryExpression()
    * f1 -> n2="["
    * f2 -> n3=PrimaryExpression()
    * f3 -> n5="]"
    */
   public void visit(ArrayLookup n, A argu);

   /**
    * f0 -> n0=PrimaryExpression()
    * f1 -> n2="."
    * f2 -> n4="length"
    */
   public void visit(ArrayLength n, A argu);

   /**
    * f0 -> n0=PrimaryExpression()
    * f1 -> n2="."
    * f2 -> n3=Identifier()
    * f3 -> n5="("
    * f4 -> ( n7=ExpressionList() )?
    * f5 -> n9=")"
    */
   public void visit(MessageSend n, A argu);

   /**
    * f0 -> n0=Expression()
    * f1 -> n1=ExpressionTail()
    */
   public void visit(ExpressionList n, A argu);

   /**
    * f0 -> ( n1=ExpressionTerm() )*
    */
   public void visit(ExpressionTail n, A argu);

   /**
    * f0 -> n1=","
    * f1 -> n2=Expression()
    */
   public void visit(ExpressionTerm n, A argu);

   /**
    * f0 -> ( n1=NotExpression() | n2=PrimaryExpression() )
    */
   public void visit(Clause n, A argu);

   /**
    * f0 -> ( n1=IntegerLiteral() | n2=TrueLiteral() | n3=FalseLiteral() | n4=Identifier() | n5=ThisExpression() | n6=ArrayAllocationExpression() | n7=AllocationExpression() | n8=BracketExpression() )
    */
   public void visit(PrimaryExpression n, A argu);

   /**
    * f0 -> n1=<INTEGER_LITERAL>
    */
   public void visit(IntegerLiteral n, A argu);

   /**
    * f0 -> n1="true"
    */
   public void visit(TrueLiteral n, A argu);

   /**
    * f0 -> n1="false"
    */
   public void visit(FalseLiteral n, A argu);

   /**
    * f0 -> n1=<IDENTIFIER>
    */
   public void visit(Identifier n, A argu);

   /**
    * f0 -> n1="this"
    */
   public void visit(ThisExpression n, A argu);

   /**
    * f0 -> n1="new"
    * f1 -> n3="int"
    * f2 -> n5="["
    * f3 -> n6=Expression()
    * f4 -> n8="]"
    */
   public void visit(ArrayAllocationExpression n, A argu);

   /**
    * f0 -> n1="new"
    * f1 -> n2=Identifier()
    * f2 -> n4="("
    * f3 -> n6=")"
    */
   public void visit(AllocationExpression n, A argu);

   /**
    * f0 -> n1="!"
    * f1 -> n2=Clause()
    */
   public void visit(NotExpression n, A argu);

   /**
    * f0 -> n1="("
    * f1 -> n2=Expression()
    * f2 -> n4=")"
    */
   public void visit(BracketExpression n, A argu);

}


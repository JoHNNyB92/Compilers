//
// Generated by JTB 1.3.2 DIT@UoA patched
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJNoArguDepthFirst<R> implements GJNoArguVisitor<R> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n) {
      if (n.size() == 1)
         return n.elementAt(0).accept(this);
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         if (n.size() == 1)
            return n.elementAt(0).accept(this);
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this);
      else
         return null;
   }

   public R visit(NodeSequence n) {
      if (n.size() == 1)
         return n.elementAt(0).accept(this);
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> n0=MainClass()
    * f1 -> ( n2=TypeDeclaration() )*
    * f2 -> n4=<EOF>
    */
   public R visit(Goal n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> n1="class"
    * f1 -> n2=Identifier()
    * f2 -> n4="{"
    * f3 -> n6="public"
    * f4 -> n8="static"
    * f5 -> n10="void"
    * f6 -> n12="main"
    * f7 -> n14="("
    * f8 -> n16="String"
    * f9 -> n18="["
    * f10 -> n20="]"
    * f11 -> n21=Identifier()
    * f12 -> n23=")"
    * f13 -> n25="{"
    * f14 -> ( n27=VarDeclaration() )*
    * f15 -> ( n29=Statement() )*
    * f16 -> n31="}"
    * f17 -> n33="}"
    */
   public R visit(MainClass n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      n.f11.accept(this);
      n.f12.accept(this);
      n.f13.accept(this);
      n.f14.accept(this);
      n.f15.accept(this);
      n.f16.accept(this);
      n.f17.accept(this);
      return _ret;
   }

   /**
    * f0 -> ( n1=ClassDeclaration() | n2=ClassExtendsDeclaration() )
    */
   public R visit(TypeDeclaration n) {
      return n.f0.accept(this);
   }

   /**
    * f0 -> n1="class"
    * f1 -> n2=Identifier()
    * f2 -> n4="{"
    * f3 -> ( n6=VarDeclaration() )*
    * f4 -> ( n8=MethodDeclaration() )*
    * f5 -> n10="}"
    */
   public R visit(ClassDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * f0 -> n1="class"
    * f1 -> n2=Identifier()
    * f2 -> n4="extends"
    * f3 -> n5=Identifier()
    * f4 -> n7="{"
    * f5 -> ( n9=VarDeclaration() )*
    * f6 -> ( n11=MethodDeclaration() )*
    * f7 -> n13="}"
    */
   public R visit(ClassExtendsDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      return _ret;
   }

   /**
    * f0 -> n0=Type()
    * f1 -> n1=Identifier()
    * f2 -> n3=";"
    */
   public R visit(VarDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> n1="public"
    * f1 -> n2=Type()
    * f2 -> n3=Identifier()
    * f3 -> n5="("
    * f4 -> ( n7=FormalParameterList() )?
    * f5 -> n9=")"
    * f6 -> n11="{"
    * f7 -> ( n13=VarDeclaration() )*
    * f8 -> ( n15=Statement() )*
    * f9 -> n17="return"
    * f10 -> n18=Expression()
    * f11 -> n20=";"
    * f12 -> n22="}"
    */
   public R visit(MethodDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      n.f11.accept(this);
      n.f12.accept(this);
      return _ret;
   }

   /**
    * f0 -> n0=FormalParameter()
    * f1 -> n1=FormalParameterTail()
    */
   public R visit(FormalParameterList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> n0=Type()
    * f1 -> n1=Identifier()
    */
   public R visit(FormalParameter n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ( n1=FormalParameterTerm() )*
    */
   public R visit(FormalParameterTail n) {
      return n.f0.accept(this);
   }

   /**
    * f0 -> n1=","
    * f1 -> n2=FormalParameter()
    */
   public R visit(FormalParameterTerm n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ( n1=ArrayType() | n2=BooleanType() | n3=IntegerType() | n4=Identifier() )
    */
   public R visit(Type n) {
      return n.f0.accept(this);
   }

   /**
    * f0 -> n1="int"
    * f1 -> n3="["
    * f2 -> n5="]"
    */
   public R visit(ArrayType n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> n1="boolean"
    */
   public R visit(BooleanType n) {
      return n.f0.accept(this);
   }

   /**
    * f0 -> n1="int"
    */
   public R visit(IntegerType n) {
      return n.f0.accept(this);
   }

   /**
    * f0 -> ( n1=Block() | n2=AssignmentStatement() | n3=ArrayAssignmentStatement() | n4=IfStatement() | n5=WhileStatement() | n6=PrintStatement() )
    */
   public R visit(Statement n) {
      return n.f0.accept(this);
   }

   /**
    * f0 -> n1="{"
    * f1 -> ( n3=Statement() )*
    * f2 -> n5="}"
    */
   public R visit(Block n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> n0=Identifier()
    * f1 -> n2="="
    * f2 -> n3=Expression()
    * f3 -> n5=";"
    */
   public R visit(AssignmentStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> n0=Identifier()
    * f1 -> n2="["
    * f2 -> n3=Expression()
    * f3 -> n5="]"
    * f4 -> n7="="
    * f5 -> n8=Expression()
    * f6 -> n10=";"
    */
   public R visit(ArrayAssignmentStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * f0 -> n1="if"
    * f1 -> n3="("
    * f2 -> n4=Expression()
    * f3 -> n6=")"
    * f4 -> n7=Statement()
    * f5 -> n9="else"
    * f6 -> n10=Statement()
    */
   public R visit(IfStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * f0 -> n1="while"
    * f1 -> n3="("
    * f2 -> n4=Expression()
    * f3 -> n6=")"
    * f4 -> n7=Statement()
    */
   public R visit(WhileStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> n1="System.out.println"
    * f1 -> n3="("
    * f2 -> n4=Expression()
    * f3 -> n6=")"
    * f4 -> n8=";"
    */
   public R visit(PrintStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> ( n1=AndExpression() | n2=CompareExpression() | n3=PlusExpression() | n4=MinusExpression() | n5=TimesExpression() | n6=ArrayLookup() | n7=ArrayLength() | n8=MessageSend() | n9=Clause() )
    */
   public R visit(Expression n) {
      return n.f0.accept(this);
   }

   /**
    * f0 -> n0=Clause()
    * f1 -> n2="&&"
    * f2 -> n3=Clause()
    */
   public R visit(AndExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> n0=PrimaryExpression()
    * f1 -> n2="<"
    * f2 -> n3=PrimaryExpression()
    */
   public R visit(CompareExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> n0=PrimaryExpression()
    * f1 -> n2="+"
    * f2 -> n3=PrimaryExpression()
    */
   public R visit(PlusExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> n0=PrimaryExpression()
    * f1 -> n2="-"
    * f2 -> n3=PrimaryExpression()
    */
   public R visit(MinusExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> n0=PrimaryExpression()
    * f1 -> n2="*"
    * f2 -> n3=PrimaryExpression()
    */
   public R visit(TimesExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> n0=PrimaryExpression()
    * f1 -> n2="["
    * f2 -> n3=PrimaryExpression()
    * f3 -> n5="]"
    */
   public R visit(ArrayLookup n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> n0=PrimaryExpression()
    * f1 -> n2="."
    * f2 -> n4="length"
    */
   public R visit(ArrayLength n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> n0=PrimaryExpression()
    * f1 -> n2="."
    * f2 -> n3=Identifier()
    * f3 -> n5="("
    * f4 -> ( n7=ExpressionList() )?
    * f5 -> n9=")"
    */
   public R visit(MessageSend n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * f0 -> n0=Expression()
    * f1 -> n1=ExpressionTail()
    */
   public R visit(ExpressionList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ( n1=ExpressionTerm() )*
    */
   public R visit(ExpressionTail n) {
      return n.f0.accept(this);
   }

   /**
    * f0 -> n1=","
    * f1 -> n2=Expression()
    */
   public R visit(ExpressionTerm n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ( n1=NotExpression() | n2=PrimaryExpression() )
    */
   public R visit(Clause n) {
      return n.f0.accept(this);
   }

   /**
    * f0 -> ( n1=IntegerLiteral() | n2=TrueLiteral() | n3=FalseLiteral() | n4=Identifier() | n5=ThisExpression() | n6=ArrayAllocationExpression() | n7=AllocationExpression() | n8=BracketExpression() )
    */
   public R visit(PrimaryExpression n) {
      return n.f0.accept(this);
   }

   /**
    * f0 -> n1=<INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n) {
      return n.f0.accept(this);
   }

   /**
    * f0 -> n1="true"
    */
   public R visit(TrueLiteral n) {
      return n.f0.accept(this);
   }

   /**
    * f0 -> n1="false"
    */
   public R visit(FalseLiteral n) {
      return n.f0.accept(this);
   }

   /**
    * f0 -> n1=<IDENTIFIER>
    */
   public R visit(Identifier n) {
      return n.f0.accept(this);
   }

   /**
    * f0 -> n1="this"
    */
   public R visit(ThisExpression n) {
      return n.f0.accept(this);
   }

   /**
    * f0 -> n1="new"
    * f1 -> n3="int"
    * f2 -> n5="["
    * f3 -> n6=Expression()
    * f4 -> n8="]"
    */
   public R visit(ArrayAllocationExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> n1="new"
    * f1 -> n2=Identifier()
    * f2 -> n4="("
    * f3 -> n6=")"
    */
   public R visit(AllocationExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> n1="!"
    * f1 -> n2=Clause()
    */
   public R visit(NotExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> n1="("
    * f1 -> n2=Expression()
    * f2 -> n4=")"
    */
   public R visit(BracketExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

}
